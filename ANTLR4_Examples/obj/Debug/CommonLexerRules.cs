//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\SourceCode\新建文件夹\ANTLR_S\ANTLR_S\Calculator_WithLexer\CommonLexerRules.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR_S.Calculator_SplitLexerAndParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class CommonLexerRules : Lexer {
	public const int
		ID=1, INT=2, NEWLINE=3, WS=4;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ID", "INT", "NEWLINE", "WS"
	};


	public CommonLexerRules(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommonLexerRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x6!\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\r\n\x2\r\x2\xE\x2\xE"+
		"\x3\x3\x6\x3\x12\n\x3\r\x3\xE\x3\x13\x3\x4\x5\x4\x17\n\x4\x3\x4\x3\x4"+
		"\x3\x5\x6\x5\x1C\n\x5\r\x5\xE\x5\x1D\x3\x5\x3\x5\x2\x2\x2\x6\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\x3\x2\x5\x4\x2\x43\\\x63|\x3\x2\x32;\x3\x2\v"+
		"\v$\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2"+
		"\x2\x3\f\x3\x2\x2\x2\x5\x11\x3\x2\x2\x2\a\x16\x3\x2\x2\x2\t\x1B\x3\x2"+
		"\x2\x2\v\r\t\x2\x2\x2\f\v\x3\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\f\x3\x2\x2\x2"+
		"\xE\xF\x3\x2\x2\x2\xF\x4\x3\x2\x2\x2\x10\x12\t\x3\x2\x2\x11\x10\x3\x2"+
		"\x2\x2\x12\x13\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14"+
		"\x6\x3\x2\x2\x2\x15\x17\a\xF\x2\x2\x16\x15\x3\x2\x2\x2\x16\x17\x3\x2\x2"+
		"\x2\x17\x18\x3\x2\x2\x2\x18\x19\a\f\x2\x2\x19\b\x3\x2\x2\x2\x1A\x1C\t"+
		"\x4\x2\x2\x1B\x1A\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2"+
		"\x1D\x1E\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F \b\x5\x2\x2 \n\x3\x2\x2\x2"+
		"\a\x2\xE\x13\x16\x1D\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR_S.Calculator_SplitLexerAndParser
